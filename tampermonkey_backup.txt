{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"IITC: Ingress intel map total conversion","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"data":{},"ts":1480917632163},"enabled":true,"position":1,"file_url":"https://static.iitc.me/build/release/total-conversion-build.user.js","uuid":"a7a6c674-eba6-41d1-b984-8f16fa18cfb4","source":""},{"name":"IITC plugin: reso energy pct in portal detail","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"data":{},"ts":1480917632169},"enabled":true,"position":2,"file_url":"https://static.iitc.me/build/release/plugins/reso-energy-pct-in-portal-detail.user.js","uuid":"684c3daa-f9e7-46f3-9b94-b3108a6ab5b2","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQGlkICAgICAgICAgICAgIGlpdGMtcGx1Z2luLXJlc28tZW5lcmd5LXBjdC1pbi1wb3J0YWwtZGV0YWlsQHhlbGlvCi8vIEBuYW1lICAgICAgICAgICBJSVRDIHBsdWdpbjogcmVzbyBlbmVyZ3kgcGN0IGluIHBvcnRhbCBkZXRhaWwKLy8gQGNhdGVnb3J5ICAgICAgIFBvcnRhbCBJbmZvCi8vIEB2ZXJzaW9uICAgICAgICAwLjEuMi4yMDE2MTAwMy40NzQwCi8vIEBuYW1lc3BhY2UgICAgICBodHRwczovL2dpdGh1Yi5jb20vam9uYXRraW5zL2luZ3Jlc3MtaW50ZWwtdG90YWwtY29udmVyc2lvbgovLyBAdXBkYXRlVVJMICAgICAgaHR0cHM6Ly9zdGF0aWMuaWl0Yy5tZS9idWlsZC9yZWxlYXNlL3BsdWdpbnMvcmVzby1lbmVyZ3ktcGN0LWluLXBvcnRhbC1kZXRhaWwubWV0YS5qcwovLyBAZG93bmxvYWRVUkwgICAgaHR0cHM6Ly9zdGF0aWMuaWl0Yy5tZS9idWlsZC9yZWxlYXNlL3BsdWdpbnMvcmVzby1lbmVyZ3ktcGN0LWluLXBvcnRhbC1kZXRhaWwudXNlci5qcwovLyBAZGVzY3JpcHRpb24gICAgW2lpdGMtMjAxNi0xMC0wMy0wMDQ3NDBdIFNob3cgcmVzb25hdG9yIGVuZXJneSBwZXJjZW50YWdlIG9uIHJlc29uYXRvciBlbmVyZ3kgYmFyIGluIHBvcnRhbCBkZXRhaWwgcGFuZWwuCi8vIEBpbmNsdWRlICAgICAgICBodHRwczovLyouaW5ncmVzcy5jb20vaW50ZWwqCi8vIEBpbmNsdWRlICAgICAgICBodHRwOi8vKi5pbmdyZXNzLmNvbS9pbnRlbCoKLy8gQG1hdGNoICAgICAgICAgIGh0dHBzOi8vKi5pbmdyZXNzLmNvbS9pbnRlbCoKLy8gQG1hdGNoICAgICAgICAgIGh0dHA6Ly8qLmluZ3Jlc3MuY29tL2ludGVsKgovLyBAaW5jbHVkZSAgICAgICAgaHR0cHM6Ly8qLmluZ3Jlc3MuY29tL21pc3Npb24vKgovLyBAaW5jbHVkZSAgICAgICAgaHR0cDovLyouaW5ncmVzcy5jb20vbWlzc2lvbi8qCi8vIEBtYXRjaCAgICAgICAgICBodHRwczovLyouaW5ncmVzcy5jb20vbWlzc2lvbi8qCi8vIEBtYXRjaCAgICAgICAgICBodHRwOi8vKi5pbmdyZXNzLmNvbS9taXNzaW9uLyoKLy8gQGdyYW50ICAgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgoKZnVuY3Rpb24gd3JhcHBlcihwbHVnaW5faW5mbykgewovLyBlbnN1cmUgcGx1Z2luIGZyYW1ld29yayBpcyB0aGVyZSwgZXZlbiBpZiBpaXRjIGlzIG5vdCB5ZXQgbG9hZGVkCmlmKHR5cGVvZiB3aW5kb3cucGx1Z2luICE9PSAnZnVuY3Rpb24nKSB3aW5kb3cucGx1Z2luID0gZnVuY3Rpb24oKSB7fTsKCi8vUExVR0lOIEFVVEhPUlM6IHdyaXRpbmcgYSBwbHVnaW4gb3V0c2lkZSBvZiB0aGUgSUlUQyBidWlsZCBlbnZpcm9ubWVudD8gaWYgc28sIGRlbGV0ZSB0aGVzZSBsaW5lcyEhCi8vKGxlYXZpbmcgdGhlbSBpbiBwbGFjZSBtaWdodCBicmVhayB0aGUgJ0Fib3V0IElJVEMnIHBhZ2Ugb3IgYnJlYWsgdXBkYXRlIGNoZWNrcykKcGx1Z2luX2luZm8uYnVpbGROYW1lID0gJ2lpdGMnOwpwbHVnaW5faW5mby5kYXRlVGltZVZlcnNpb24gPSAnMjAxNjEwMDMuNDc0MCc7CnBsdWdpbl9pbmZvLnBsdWdpbklkID0gJ3Jlc28tZW5lcmd5LXBjdC1pbi1wb3J0YWwtZGV0YWlsJzsKLy9FTkQgUExVR0lOIEFVVEhPUlMgTk9URQoKCgovLyBQTFVHSU4gU1RBUlQgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCi8vIHVzZSBvd24gbmFtZXNwYWNlIGZvciBwbHVnaW4Kd2luZG93LnBsdWdpbi5yZXNvRW5lcmd5UGN0SW5Qb3J0YWxEZXRhaWwgPSBmdW5jdGlvbigpIHt9OwoKd2luZG93LnBsdWdpbi5yZXNvRW5lcmd5UGN0SW5Qb3J0YWxEZXRhaWwudXBkYXRlTWV0ZXIgPSBmdW5jdGlvbihkYXRhKSB7CiAgJCgic3Bhbi5tZXRlci1sZXZlbCIpCiAgICAuY3NzKHsKICAgICAgIndvcmQtc3BhY2luZyI6ICItMXB4IiwKICAgICAgInRleHQtYWxpZ24iOiAibGVmdCIsCiAgICAgICJmb250LXNpemUiOiAiOTAlIiwKICAgICAgInBhZGRpbmctbGVmdCI6ICIycHgiLAogICAgfSkKICAgIC5lYWNoKGZ1bmN0aW9uKCkgewogICAgICB2YXIgbWF0Y2hSZXN1bHQgPSAkKHRoaXMpLnBhcmVudCgpLmF0dHIoJ3RpdGxlJykubWF0Y2goL1woKFxkKlwlKVwpLyk7CiAgICAgIGlmKG1hdGNoUmVzdWx0KSB7CiAgICAgICAgdmFyIGh0bWwgPSAkKHRoaXMpLmh0bWwoKSArICc8ZGl2IHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowO3RvcDowIj4nICsgbWF0Y2hSZXN1bHRbMV0gKyAnPC9kaXY+JzsKICAgICAgICAkKHRoaXMpLmh0bWwoaHRtbCk7CiAgICAgIH0KICAgIH0pOwp9Cgp2YXIgc2V0dXAgPSAgZnVuY3Rpb24oKSB7CiAgd2luZG93LmFkZEhvb2soJ3BvcnRhbERldGFpbHNVcGRhdGVkJywgd2luZG93LnBsdWdpbi5yZXNvRW5lcmd5UGN0SW5Qb3J0YWxEZXRhaWwudXBkYXRlTWV0ZXIpOwp9CgovLyBQTFVHSU4gRU5EIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCgpzZXR1cC5pbmZvID0gcGx1Z2luX2luZm87IC8vYWRkIHRoZSBzY3JpcHQgaW5mbyBkYXRhIHRvIHRoZSBmdW5jdGlvbiBhcyBhIHByb3BlcnR5CmlmKCF3aW5kb3cuYm9vdFBsdWdpbnMpIHdpbmRvdy5ib290UGx1Z2lucyA9IFtdOwp3aW5kb3cuYm9vdFBsdWdpbnMucHVzaChzZXR1cCk7Ci8vIGlmIElJVEMgaGFzIGFscmVhZHkgYm9vdGVkLCBpbW1lZGlhdGVseSBydW4gdGhlICdzZXR1cCcgZnVuY3Rpb24KaWYod2luZG93LmlpdGNMb2FkZWQgJiYgdHlwZW9mIHNldHVwID09PSAnZnVuY3Rpb24nKSBzZXR1cCgpOwp9IC8vIHdyYXBwZXIgZW5kCi8vIGluamVjdCBjb2RlIGludG8gc2l0ZSBjb250ZXh0CnZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKdmFyIGluZm8gPSB7fTsKaWYgKHR5cGVvZiBHTV9pbmZvICE9PSAndW5kZWZpbmVkJyAmJiBHTV9pbmZvICYmIEdNX2luZm8uc2NyaXB0KSBpbmZvLnNjcmlwdCA9IHsgdmVyc2lvbjogR01faW5mby5zY3JpcHQudmVyc2lvbiwgbmFtZTogR01faW5mby5zY3JpcHQubmFtZSwgZGVzY3JpcHRpb246IEdNX2luZm8uc2NyaXB0LmRlc2NyaXB0aW9uIH07CnNjcmlwdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnKCcrIHdyYXBwZXIgKycpKCcrSlNPTi5zdHJpbmdpZnkoaW5mbykrJyk7JykpOwooZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKCgo="},{"name":"IITC Plugin: Player tracker","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"data":{},"ts":1480917632187},"enabled":true,"position":3,"file_url":"https://static.iitc.me/build/release/plugins/player-tracker.user.js","uuid":"815b76ab-fa54-47f2-9bbc-444f90b8ae61","source":""},{"name":"IITC plugin: Bookmarks for maps and portals","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"data":{},"ts":1480917632195},"enabled":true,"position":4,"file_url":"https://static.iitc.me/build/release/plugins/bookmarks-by-zaso.user.js","uuid":"79ded8a4-e688-4204-ad60-12bcf8cdcb2a","source":""},{"name":"IITC plugin: draw tools","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"data":{},"ts":1480917632213},"enabled":true,"position":5,"file_url":"https://static.iitc.me/build/release/plugins/draw-tools.user.js","uuid":"b514a450-156f-44d5-b2b4-f769d509973b","source":""},{"name":"IITC plugin: Fix Google Map offsets in China","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"data":{},"ts":1480917632219},"enabled":true,"position":6,"file_url":"https://static.iitc.me/build/release/plugins/fix-googlemap-china-offset.user.js","uuid":"5fa7cfc0-6224-4f48-8eaa-2794647cca48","source":""},{"name":"IITC plugin: cross links","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"data":{},"ts":1480917632224},"enabled":true,"position":7,"file_url":"https://static.iitc.me/build/release/plugins/cross_link.user.js","uuid":"d70db0ef-1225-48bf-b391-6bb376932f2d","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQGlkICAgICAgICAgICAgIGlpdGMtcGx1Z2luLWNyb3NzLWxpbmtzQG1jYmVuCi8vIEBuYW1lICAgICAgICAgICBJSVRDIHBsdWdpbjogY3Jvc3MgbGlua3MKLy8gQGNhdGVnb3J5ICAgICAgIExheWVyCi8vIEB2ZXJzaW9uICAgICAgICAxLjEuMi4yMDE2MTAwMy40NzQwCi8vIEBuYW1lc3BhY2UgICAgICBodHRwczovL2dpdGh1Yi5jb20vam9uYXRraW5zL2luZ3Jlc3MtaW50ZWwtdG90YWwtY29udmVyc2lvbgovLyBAdXBkYXRlVVJMICAgICAgaHR0cHM6Ly9zdGF0aWMuaWl0Yy5tZS9idWlsZC9yZWxlYXNlL3BsdWdpbnMvY3Jvc3NfbGluay5tZXRhLmpzCi8vIEBkb3dubG9hZFVSTCAgICBodHRwczovL3N0YXRpYy5paXRjLm1lL2J1aWxkL3JlbGVhc2UvcGx1Z2lucy9jcm9zc19saW5rLnVzZXIuanMKLy8gQGRlc2NyaXB0aW9uICAgIFtpaXRjLTIwMTYtMTAtMDMtMDA0NzQwXSBFWFBFUklNRU5UQUw6IENoZWNrcyBmb3IgZXhpc3RpbmcgbGlua3MgdGhhdCBjcm9zcyBwbGFubmVkIGxpbmtzLiBSZXF1aXJlcyBkcmF3LXRvb2xzIHBsdWdpbi4KLy8gQGluY2x1ZGUgICAgICAgIGh0dHBzOi8vKi5pbmdyZXNzLmNvbS9pbnRlbCoKLy8gQGluY2x1ZGUgICAgICAgIGh0dHA6Ly8qLmluZ3Jlc3MuY29tL2ludGVsKgovLyBAbWF0Y2ggICAgICAgICAgaHR0cHM6Ly8qLmluZ3Jlc3MuY29tL2ludGVsKgovLyBAbWF0Y2ggICAgICAgICAgaHR0cDovLyouaW5ncmVzcy5jb20vaW50ZWwqCi8vIEBpbmNsdWRlICAgICAgICBodHRwczovLyouaW5ncmVzcy5jb20vbWlzc2lvbi8qCi8vIEBpbmNsdWRlICAgICAgICBodHRwOi8vKi5pbmdyZXNzLmNvbS9taXNzaW9uLyoKLy8gQG1hdGNoICAgICAgICAgIGh0dHBzOi8vKi5pbmdyZXNzLmNvbS9taXNzaW9uLyoKLy8gQG1hdGNoICAgICAgICAgIGh0dHA6Ly8qLmluZ3Jlc3MuY29tL21pc3Npb24vKgovLyBAZ3JhbnQgICAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCgpmdW5jdGlvbiB3cmFwcGVyKHBsdWdpbl9pbmZvKSB7Ci8vIGVuc3VyZSBwbHVnaW4gZnJhbWV3b3JrIGlzIHRoZXJlLCBldmVuIGlmIGlpdGMgaXMgbm90IHlldCBsb2FkZWQKaWYodHlwZW9mIHdpbmRvdy5wbHVnaW4gIT09ICdmdW5jdGlvbicpIHdpbmRvdy5wbHVnaW4gPSBmdW5jdGlvbigpIHt9OwoKLy9QTFVHSU4gQVVUSE9SUzogd3JpdGluZyBhIHBsdWdpbiBvdXRzaWRlIG9mIHRoZSBJSVRDIGJ1aWxkIGVudmlyb25tZW50PyBpZiBzbywgZGVsZXRlIHRoZXNlIGxpbmVzISEKLy8obGVhdmluZyB0aGVtIGluIHBsYWNlIG1pZ2h0IGJyZWFrIHRoZSAnQWJvdXQgSUlUQycgcGFnZSBvciBicmVhayB1cGRhdGUgY2hlY2tzKQpwbHVnaW5faW5mby5idWlsZE5hbWUgPSAnaWl0Yyc7CnBsdWdpbl9pbmZvLmRhdGVUaW1lVmVyc2lvbiA9ICcyMDE2MTAwMy40NzQwJzsKcGx1Z2luX2luZm8ucGx1Z2luSWQgPSAnY3Jvc3NfbGluayc7Ci8vRU5EIFBMVUdJTiBBVVRIT1JTIE5PVEUKCgoKLy8gUExVR0lOIFNUQVJUIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgoKd2luZG93LnBsdWdpbi5jcm9zc0xpbmtzID0gZnVuY3Rpb24oKSB7fTsKCgp3aW5kb3cucGx1Z2luLmNyb3NzTGlua3MuZ3JlYXRDaXJjbGVBcmNJbnRlcnNlY3QgPSBmdW5jdGlvbihhMCxhMSxiMCxiMSkgewogIC8vIGJhc2VkIG9uIHRoZSBmb3JtdWxhIGF0IGh0dHA6Ly93aWxsaWFtcy5iZXN0LnZ3aC5uZXQvYXZmb3JtLmh0bSNJbnQKCiAgLy8gbWV0aG9kOgogIC8vIGNoZWNrIHRvIGVuc3VyZSBubyBsaW5lIHNlZ21lbnQgaXMgemVybyBsZW5ndGggLSBpZiBzbywgY2Fubm90IGNyb3NzCiAgLy8gY2hlY2sgdG8gc2VlIGlmIGVpdGhlciBvZiB0aGUgbGluZXMgc3RhcnQvZW5kIGF0IHRoZSBzYW1lIHBvaW50LiBpZiBzbywgdGhlbiB0aGV5IGNhbm5vdCBjcm9zcwogIC8vIGNoZWNrIHRvIHNlZSBpZiB0aGUgbGluZSBzZWdtZW50cyBvdmVybGFwIGluIGxvbmdpdHVkZS4gaWYgbm90LCBubyBjcm9zc2luZwogIC8vIGlmIG92ZXJsYXAsIGNsaXAgZWFjaCBsaW5lIHRvIHRoZSBvdmVybGFwcGluZyBsb25naXR1ZGVzLCB0aGVuIHNlZSBpZiBsYXRpdHVkZXMgY3Jvc3MgCgogIC8vIGFudGktbWVyaWRpYW4gaGFuZGxpbmcuIHRoaXMgY29kZSB3aWxsIG5vdCBzZW5zaWJseSBoYW5kbGUgYSBjYXNlIHdoZXJlIG9uZSBwb2ludCBpcwogIC8vIGNsb3NlIHRvIC0xODAgZGVncmVlcyBhbmQgdGhlIG90aGVyICsxODAgZGVncmVlcy4gdW53cmFwIGNvb3JkaW5hdGVzIGluIHRoaXMgY2FzZSwgc28gb25lIHBvaW50CiAgLy8gaXMgYmV5b25kICstMTgwIGRlZ3JlZXMuIHRoaXMgaXMgYWxyZWFkeSB0cnVlIGluIElJVEMKICAvLyBGSVhNRT8gaWYgdGhlIHR3byBsaW5lcyBoYXZlIGJlZW4gJ3Vud3JhcHBlZCcgZGlmZmVyZW50bHkgLSBvbmUgcG9zaXRpdmUsIG9uZSBuZWdhdGl2ZSAtIGl0IHdpbGwgZmFpbAoKICAvLyB6ZXJvIGxlbmd0aCBsaW5lIHRlc3RzCiAgaWYgKGEwLmVxdWFscyhhMSkpIHJldHVybiBmYWxzZTsKICBpZiAoYjAuZXF1YWxzKGIxKSkgcmV0dXJuIGZhbHNlOwoKICAvLyBsaW5lcyBoYXZlIGEgY29tbW9uIHBvaW50CiAgaWYgKGEwLmVxdWFscyhiMCkgfHwgYTAuZXF1YWxzKGIxKSkgcmV0dXJuIGZhbHNlOwogIGlmIChhMS5lcXVhbHMoYjApIHx8IGExLmVxdWFscyhiMSkpIHJldHVybiBmYWxzZTsKCgogIC8vIGNoZWNrIGZvciAnaG9yaXpvbnRhbCcgb3ZlcmxhcCBpbiBsbmdpdHVkZQogIGlmIChNYXRoLm1pbihhMC5sbmcsYTEubG5nKSA+IE1hdGgubWF4KGIwLmxuZyxiMS5sbmcpKSByZXR1cm4gZmFsc2U7CiAgaWYgKE1hdGgubWF4KGEwLmxuZyxhMS5sbmcpIDwgTWF0aC5taW4oYjAubG5nLGIxLmxuZykpIHJldHVybiBmYWxzZTsKCgogIC8vIG9rLCBvdXIgdHdvIGxpbmVzIGhhdmUgc29tZSBob3Jpem9udGFsIG92ZXJsYXAgaW4gbG9uZ2l0dWRlCiAgLy8gMS4gY2FsY3VsYXRlIHRoZSBvdmVybGFwcGluZyBtaW4vbWF4IGxvbmdpdHVkZQogIC8vIDIuIGNhbGN1bGF0ZSBlYWNoIGxpbmUgbGF0aXR1ZGUgYXQgZWFjaCBwb2ludAogIC8vIDMuIGlmIGxhdGl0dWRlcyBjaGFuZ2UgcGxhY2UgYmV0d2VlbiBvdmVybGFwcGluZyByYW5nZSwgdGhlIGxpbmVzIGNyb3NzCgoKICAvLyBjbGFzcyB0byBob2xkIHRoZSBwcmUtY2FsY3VsYXRlZCBtYXRocyBmb3IgYSBnZW9kZXNpYyBsaW5lCiAgLy8gVE9ETzogbW92ZSB0aGlzIG91dHNpZGUgdGhpcyBmdW5jdGlvbiwgc28gaXQgY2FuIGJlIHByZS1jYWxjdWxhdGVkIG9uY2UgZm9yIGVhY2ggbGluZSB3ZSB0ZXN0CiAgdmFyIEdlb2Rlc2ljTGluZSA9IGZ1bmN0aW9uKHN0YXJ0LGVuZCkgewogICAgdmFyIGQyciA9IE1hdGguUEkvMTgwLjA7CiAgICB2YXIgcjJkID0gMTgwLjAvTWF0aC5QSTsKCiAgICAvLyBtYXRocyBiYXNlZCBvbiBodHRwOi8vd2lsbGlhbXMuYmVzdC52d2gubmV0L2F2Zm9ybS5odG0jSW50CgogICAgaWYgKHN0YXJ0LmxuZyA9PSBlbmQubG5nKSB7CiAgICAgIHRocm93ICdFcnJvcjogY2Fubm90IGNhbGN1bGF0ZSBsYXRpdHVkZSBmb3IgbWVyaWRpYW5zJzsKICAgIH0KCiAgICAvLyBvbmx5IHRoZSB2YXJpYWJsZXMgbmVlZGVkIHRvIGNhbGN1bGF0ZSBhIGxhdGl0dWRlIGZvciBhIGdpdmVuIGxvbmdpdHVkZSBhcmUgc3RvcmVkIGluICd0aGlzJwogICAgdGhpcy5sYXQxID0gc3RhcnQubGF0ICogZDJyOwogICAgdGhpcy5sYXQyID0gZW5kLmxhdCAqIGQycjsKICAgIHRoaXMubG5nMSA9IHN0YXJ0LmxuZyAqIGQycjsKICAgIHRoaXMubG5nMiA9IGVuZC5sbmcgKiBkMnI7CgogICAgdmFyIGRMbmcgPSB0aGlzLmxuZzEtdGhpcy5sbmcyOwoKICAgIHZhciBzaW5MYXQxID0gTWF0aC5zaW4odGhpcy5sYXQxKTsKICAgIHZhciBzaW5MYXQyID0gTWF0aC5zaW4odGhpcy5sYXQyKTsKICAgIHZhciBjb3NMYXQxID0gTWF0aC5jb3ModGhpcy5sYXQxKTsKICAgIHZhciBjb3NMYXQyID0gTWF0aC5jb3ModGhpcy5sYXQyKTsKCiAgICB0aGlzLnNpbkxhdDFDb3NMYXQyID0gc2luTGF0MSpjb3NMYXQyOwogICAgdGhpcy5zaW5MYXQyQ29zTGF0MSA9IHNpbkxhdDIqY29zTGF0MTsKCiAgICB0aGlzLmNvc0xhdDFDb3NMYXQyU2luRExuZyA9IGNvc0xhdDEqY29zTGF0MipNYXRoLnNpbihkTG5nKTsKICB9CgogIEdlb2Rlc2ljTGluZS5wcm90b3R5cGUuaXNNZXJpZGlhbiA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMubG5nMSA9PSB0aGlzLmxuZzI7CiAgfQoKICBHZW9kZXNpY0xpbmUucHJvdG90eXBlLmxhdEF0TG5nID0gZnVuY3Rpb24obG5nKSB7CiAgICBsbmcgPSBsbmcgKiBNYXRoLlBJIC8gMTgwOyAvL3RvIHJhZGlhbnMKCiAgICB2YXIgbGF0OwogICAgLy8gaWYgd2UncmUgdGVzdGluZyB0aGUgc3RhcnQvZW5kIHBvaW50LCByZXR1cm4gdGhhdCBkaXJlY3RseSByYXRoZXIgdGhhbiBjYWxjdWxhdGluZwogICAgLy8gMS4gdGhpcyBtYXkgYmUgZnJhY3Rpb25hbGx5IGZhc3Rlciwgbm8gY29tcGxleCBtYXRocwogICAgLy8gMi4gdGhlcmUncyBvZGQgcm91bmRpbmcgaXNzdWVzIHRoYXQgb2NjdXIgb24gc29tZSBicm93c2VycyAobm90aWNlZCBvbiBJSVRDIE1PYmlsZSkgZm9yIHZlcnkgc2hvcnQgbGlua3MgLSB0aGlzIG1heSBoZWxwCiAgICBpZiAobG5nID09IHRoaXMubG5nMSkgewogICAgICBsYXQgPSB0aGlzLmxhdDE7CiAgICB9IGVsc2UgaWYgKGxuZyA9PSB0aGlzLmxuZzIpIHsKICAgICAgbGF0ID0gdGhpcy5sYXQyOwogICAgfSBlbHNlIHsKICAgICAgbGF0ID0gTWF0aC5hdGFuICggKHRoaXMuc2luTGF0MUNvc0xhdDIqTWF0aC5zaW4obG5nLXRoaXMubG5nMikgLSB0aGlzLnNpbkxhdDJDb3NMYXQxKk1hdGguc2luKGxuZy10aGlzLmxuZzEpKQogICAgICAgICAgICAgICAgICAgICAgIC8gdGhpcy5jb3NMYXQxQ29zTGF0MlNpbkRMbmcpOwogICAgfQogICAgcmV0dXJuIGxhdCAqIDE4MCAvIE1hdGguUEk7IC8vIHJldHVybiB2YWx1ZSBpbiBkZWdyZWVzCiAgfQoKCgogIC8vIGNhbGN1bGF0ZSB0aGUgbG9uZ2l0dWRlIG9mIHRoZSBvdmVybGFwcGluZyByZWdpb24KICB2YXIgbGVmdExuZyA9IE1hdGgubWF4KCBNYXRoLm1pbihhMC5sbmcsYTEubG5nKSwgTWF0aC5taW4oYjAubG5nLGIxLmxuZykgKTsKICB2YXIgcmlnaHRMbmcgPSBNYXRoLm1pbiggTWF0aC5tYXgoYTAubG5nLGExLmxuZyksIE1hdGgubWF4KGIwLmxuZyxiMS5sbmcpICk7CgogIC8vIGNhbGN1bGF0ZSB0aGUgbGF0aXR1ZGVzIGZvciBlYWNoIGxpbmUgYXQgbGVmdCArIHJpZ2h0IGxvbmdpdHVkZXMKICAvLyBOT1RFOiBuZWVkIGEgc3BlY2lhbCBjYXNlIGZvciBtZXJpZGlhbnMgLSBhcyBHZW9kZXNpY0xpbmUubGF0QXRMbmcgbWV0aG9kIGlzIGludmFsaWQgaW4gdGhhdCBjYXNlCiAgdmFyIGFMZWZ0TGF0LCBhUmlnaHRMYXQ7CiAgaWYgKGEwLmxuZyA9PSBhMS5sbmcpIHsKICAgIC8vICdsZWZ0JyBhbmQgJ3JpZ2h0JyBub3cgYmVjb21lICd0b3AnIGFuZCAnYm90dG9tJyAoaW4gc29tZSBvcmRlcikgLSB3aGljaCBpcyBmaW5lIGZvciB0aGUgYmVsb3cgaW50ZXJzZWN0aW9uIGNvZGUKICAgIGFMZWZ0TGF0ID0gYTAubGF0OwogICAgYVJpZ2h0TGF0ID0gYTEubGF0OwogIH0gZWxzZSB7CiAgICB2YXIgYUdlbyA9IG5ldyBHZW9kZXNpY0xpbmUoYTAsYTEpOwogICAgYUxlZnRMYXQgPSBhR2VvLmxhdEF0TG5nKGxlZnRMbmcpOwogICAgYVJpZ2h0TGF0ID0gYUdlby5sYXRBdExuZyhyaWdodExuZyk7CiAgfQoKICB2YXIgYkxlZnRMYXQsIGJSaWdodExhdDsKICBpZiAoYjAubG5nID09IGIxLmxuZykgewogICAgLy8gJ2xlZnQnIGFuZCAncmlnaHQnIG5vdyBiZWNvbWUgJ3RvcCcgYW5kICdib3R0b20nIChpbiBzb21lIG9yZGVyKSAtIHdoaWNoIGlzIGZpbmUgZm9yIHRoZSBiZWxvdyBpbnRlcnNlY3Rpb24gY29kZQogICAgYkxlZnRMYXQgPSBiMC5sYXQ7CiAgICBiUmlnaHRMYXQgPSBiMS5sYXQ7CiAgfSBlbHNlIHsKICAgIHZhciBiR2VvID0gbmV3IEdlb2Rlc2ljTGluZShiMCxiMSk7CiAgICBiTGVmdExhdCA9IGJHZW8ubGF0QXRMbmcobGVmdExuZyk7CiAgICBiUmlnaHRMYXQgPSBiR2VvLmxhdEF0TG5nKHJpZ2h0TG5nKTsKICB9CgogIC8vIGlmIGJvdGggYSBhcmUgbGVzcyBvciBncmVhdGVyIHRoYW4gYm90aCBiLCB0aGVuIGxpbmVzIGRvIG5vdCBjcm9zcwoKICBpZiAoYUxlZnRMYXQgPCBiTGVmdExhdCAmJiBhUmlnaHRMYXQgPCBiUmlnaHRMYXQpIHJldHVybiBmYWxzZTsKICBpZiAoYUxlZnRMYXQgPiBiTGVmdExhdCAmJiBhUmlnaHRMYXQgPiBiUmlnaHRMYXQpIHJldHVybiBmYWxzZTsKCiAgLy8gbGF0aXR1ZGVzIGNyb3NzIGJldHdlZW4gbGVmdCBhbmQgcmlnaHQgLSBzbyBnZW9kZXNpYyBsaW5lcyBjcm9zcwogIHJldHVybiB0cnVlOwp9CgoKCndpbmRvdy5wbHVnaW4uY3Jvc3NMaW5rcy50ZXN0UG9seUxpbmUgPSBmdW5jdGlvbiAocG9seWxpbmUsIGxpbmssY2xvc2VkKSB7CgogICAgdmFyIGEgPSBsaW5rLmdldExhdExuZ3MoKTsKICAgIHZhciBiID0gcG9seWxpbmUuZ2V0TGF0TG5ncygpOwoKICAgIGZvciAodmFyIGk9MDtpPGIubGVuZ3RoLTE7KytpKSB7CiAgICAgICAgaWYgKHdpbmRvdy5wbHVnaW4uY3Jvc3NMaW5rcy5ncmVhdENpcmNsZUFyY0ludGVyc2VjdChhWzBdLGFbMV0sYltpXSxiW2krMV0pKSByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBpZiAoY2xvc2VkKSB7CiAgICAgICAgaWYgKHdpbmRvdy5wbHVnaW4uY3Jvc3NMaW5rcy5ncmVhdENpcmNsZUFyY0ludGVyc2VjdChhWzBdLGFbMV0sYltiLmxlbmd0aC0xXSxiWzBdKSkgcmV0dXJuIHRydWU7CiAgICB9CgogICAgcmV0dXJuIGZhbHNlOwp9Cgp3aW5kb3cucGx1Z2luLmNyb3NzTGlua3Mub25MaW5rQWRkZWQgPSBmdW5jdGlvbiAoZGF0YSkgewogICAgaWYgKHdpbmRvdy5wbHVnaW4uY3Jvc3NMaW5rcy5kaXNhYmxlZCkgcmV0dXJuOwoKICAgIHBsdWdpbi5jcm9zc0xpbmtzLnRlc3RMaW5rKGRhdGEubGluayk7Cn0KCndpbmRvdy5wbHVnaW4uY3Jvc3NMaW5rcy5jaGVja0FsbExpbmtzID0gZnVuY3Rpb24oKSB7CiAgICBpZiAod2luZG93LnBsdWdpbi5jcm9zc0xpbmtzLmRpc2FibGVkKSByZXR1cm47CgogICAgY29uc29sZS5kZWJ1ZygiQ3Jvc3MtTGlua3M6IGNoZWNraW5nIGFsbCBsaW5rcyIpOwogICAgcGx1Z2luLmNyb3NzTGlua3MubGlua0xheWVyLmNsZWFyTGF5ZXJzKCk7CiAgICBwbHVnaW4uY3Jvc3NMaW5rcy5saW5rTGF5ZXJHdWlkcyA9IHt9OwoKICAgICQuZWFjaCh3aW5kb3cubGlua3MsIGZ1bmN0aW9uKGd1aWQsIGxpbmspIHsKICAgICAgICBwbHVnaW4uY3Jvc3NMaW5rcy50ZXN0TGluayhsaW5rKTsKICAgIH0pOwp9Cgp3aW5kb3cucGx1Z2luLmNyb3NzTGlua3MudGVzdExpbmsgPSBmdW5jdGlvbiAobGluaykgewogICAgaWYgKHBsdWdpbi5jcm9zc0xpbmtzLmxpbmtMYXllckd1aWRzW2xpbmsub3B0aW9ucy5ndWlkXSkgcmV0dXJuOwoKICAgIGZvciAodmFyIGkgaW4gcGx1Z2luLmRyYXdUb29scy5kcmF3bkl0ZW1zLl9sYXllcnMpIHsgLy8gbGVhZmxldCBkb24ndCBzdXBwb3J0IGJyZWFraW5nIG91dCBvZiB0aGUgbG9vcAogICAgICAgdmFyIGxheWVyID0gcGx1Z2luLmRyYXdUb29scy5kcmF3bkl0ZW1zLl9sYXllcnNbaV07CiAgICAgICBpZiAobGF5ZXIgaW5zdGFuY2VvZiBMLkdlb2Rlc2ljUG9seWdvbikgewogICAgICAgICAgIGlmIChwbHVnaW4uY3Jvc3NMaW5rcy50ZXN0UG9seUxpbmUobGF5ZXIsIGxpbmssdHJ1ZSkpIHsKICAgICAgICAgICAgICAgcGx1Z2luLmNyb3NzTGlua3Muc2hvd0xpbmsobGluayk7CiAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGxheWVyIGluc3RhbmNlb2YgTC5HZW9kZXNpY1BvbHlsaW5lKSB7CiAgICAgICAgICAgIGlmIChwbHVnaW4uY3Jvc3NMaW5rcy50ZXN0UG9seUxpbmUobGF5ZXIsIGxpbmspKSB7CiAgICAgICAgICAgICAgICBwbHVnaW4uY3Jvc3NMaW5rcy5zaG93TGluayhsaW5rKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKfQoKCndpbmRvdy5wbHVnaW4uY3Jvc3NMaW5rcy5zaG93TGluayA9IGZ1bmN0aW9uKGxpbmspIHsKCiAgICB2YXIgcG9seSA9IEwuZ2VvZGVzaWNQb2x5bGluZShsaW5rLmdldExhdExuZ3MoKSwgewogICAgICAgY29sb3I6ICcjZDIyJywKICAgICAgIG9wYWNpdHk6IDAuNywKICAgICAgIHdlaWdodDogNSwKICAgICAgIGNsaWNrYWJsZTogZmFsc2UsCiAgICAgICBkYXNoQXJyYXk6IFs4LDhdLAoKICAgICAgIGd1aWQ6IGxpbmsub3B0aW9ucy5ndWlkCiAgICB9KTsKCiAgICBwb2x5LmFkZFRvKHBsdWdpbi5jcm9zc0xpbmtzLmxpbmtMYXllcik7CiAgICBwbHVnaW4uY3Jvc3NMaW5rcy5saW5rTGF5ZXJHdWlkc1tsaW5rLm9wdGlvbnMuZ3VpZF09cG9seTsKfQoKd2luZG93LnBsdWdpbi5jcm9zc0xpbmtzLm9uTWFwRGF0YVJlZnJlc2hFbmQgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAod2luZG93LnBsdWdpbi5jcm9zc0xpbmtzLmRpc2FibGVkKSByZXR1cm47CgogICAgd2luZG93LnBsdWdpbi5jcm9zc0xpbmtzLmxpbmtMYXllci5icmluZ1RvRnJvbnQoKTsKCiAgICB3aW5kb3cucGx1Z2luLmNyb3NzTGlua3MudGVzdEZvckRlbGV0ZWRMaW5rcygpOwp9Cgp3aW5kb3cucGx1Z2luLmNyb3NzTGlua3MudGVzdEFsbExpbmtzQWdhaW5zdExheWVyID0gZnVuY3Rpb24gKGxheWVyKSB7CiAgICBpZiAod2luZG93LnBsdWdpbi5jcm9zc0xpbmtzLmRpc2FibGVkKSByZXR1cm47CgogICAgJC5lYWNoKHdpbmRvdy5saW5rcywgZnVuY3Rpb24oZ3VpZCwgbGluaykgewogICAgICAgIGlmICghcGx1Z2luLmNyb3NzTGlua3MubGlua0xheWVyR3VpZHNbbGluay5vcHRpb25zLmd1aWRdKQogICAgICAgIHsKICAgICAgICAgICAgaWYgKGxheWVyIGluc3RhbmNlb2YgTC5HZW9kZXNpY1BvbHlnb24pIHsKICAgICAgICAgICAgICAgIGlmIChwbHVnaW4uY3Jvc3NMaW5rcy50ZXN0UG9seUxpbmUobGF5ZXIsIGxpbmssdHJ1ZSkpIHsKICAgICAgICAgICAgICAgICAgICBwbHVnaW4uY3Jvc3NMaW5rcy5zaG93TGluayhsaW5rKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChsYXllciBpbnN0YW5jZW9mIEwuR2VvZGVzaWNQb2x5bGluZSkgewogICAgICAgICAgICAgICAgaWYgKHBsdWdpbi5jcm9zc0xpbmtzLnRlc3RQb2x5TGluZShsYXllciwgbGluaykpIHsKICAgICAgICAgICAgICAgICAgICBwbHVnaW4uY3Jvc3NMaW5rcy5zaG93TGluayhsaW5rKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwp9Cgp3aW5kb3cucGx1Z2luLmNyb3NzTGlua3MudGVzdEZvckRlbGV0ZWRMaW5rcyA9IGZ1bmN0aW9uICgpIHsKICAgIHdpbmRvdy5wbHVnaW4uY3Jvc3NMaW5rcy5saW5rTGF5ZXIuZWFjaExheWVyKCBmdW5jdGlvbihsYXllcikgewogICAgICAgIHZhciBndWlkID0gbGF5ZXIub3B0aW9ucy5ndWlkOwogICAgICAgIGlmICghd2luZG93LmxpbmtzW2d1aWRdKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJsaW5rIHJlbW92ZWQiKTsKICAgICAgICAgICAgcGx1Z2luLmNyb3NzTGlua3MubGlua0xheWVyLnJlbW92ZUxheWVyKGxheWVyKTsKICAgICAgICAgICAgZGVsZXRlIHBsdWdpbi5jcm9zc0xpbmtzLmxpbmtMYXllckd1aWRzW2d1aWRdOwogICAgICAgIH0KICAgIH0pOwp9Cgp3aW5kb3cucGx1Z2luLmNyb3NzTGlua3MuY3JlYXRlTGF5ZXIgPSBmdW5jdGlvbigpIHsKICAgIHdpbmRvdy5wbHVnaW4uY3Jvc3NMaW5rcy5saW5rTGF5ZXIgPSBuZXcgTC5GZWF0dXJlR3JvdXAoKTsKICAgIHdpbmRvdy5wbHVnaW4uY3Jvc3NMaW5rcy5saW5rTGF5ZXJHdWlkcz17fTsKICAgIHdpbmRvdy5hZGRMYXllckdyb3VwKCdDcm9zcyBMaW5rcycsIHdpbmRvdy5wbHVnaW4uY3Jvc3NMaW5rcy5saW5rTGF5ZXIsIHRydWUpOwoKICAgIG1hcC5vbignbGF5ZXJhZGQnLCBmdW5jdGlvbihvYmopIHsKICAgICAgaWYob2JqLmxheWVyID09PSB3aW5kb3cucGx1Z2luLmNyb3NzTGlua3MubGlua0xheWVyKSB7CiAgICAgICAgZGVsZXRlIHdpbmRvdy5wbHVnaW4uY3Jvc3NMaW5rcy5kaXNhYmxlZDsKICAgICAgICB3aW5kb3cucGx1Z2luLmNyb3NzTGlua3MuY2hlY2tBbGxMaW5rcygpOwogICAgICB9CiAgICB9KTsKICAgIG1hcC5vbignbGF5ZXJyZW1vdmUnLCBmdW5jdGlvbihvYmopIHsKICAgICAgaWYob2JqLmxheWVyID09PSB3aW5kb3cucGx1Z2luLmNyb3NzTGlua3MubGlua0xheWVyKSB7CiAgICAgICAgd2luZG93LnBsdWdpbi5jcm9zc0xpbmtzLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgICB3aW5kb3cucGx1Z2luLmNyb3NzTGlua3MubGlua0xheWVyLmNsZWFyTGF5ZXJzKCk7CiAgICAgICAgcGx1Z2luLmNyb3NzTGlua3MubGlua0xheWVyR3VpZHMgPSB7fTsKICAgICAgfQogICAgfSk7CgogICAgLy8gZW5zdXJlICdkaXNhYmxlZCcgZmxhZyBpcyBpbml0aWFsaXNlZAogICAgaWYgKCFtYXAuaGFzTGF5ZXIod2luZG93LnBsdWdpbi5jcm9zc0xpbmtzLmxpbmtMYXllcikpIHsKICAgICAgICB3aW5kb3cucGx1Z2luLmNyb3NzTGlua3MuZGlzYWJsZWQgPSB0cnVlOwogICAgfQp9Cgp2YXIgc2V0dXAgPSBmdW5jdGlvbigpIHsKICAgIGlmICh3aW5kb3cucGx1Z2luLmRyYXdUb29scyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICBhbGVydCgiJ0Nyb3NzLUxpbmtzJyByZXF1aXJlcyAnZHJhdy10b29scyciKTsKICAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyB0aGlzIHBsdWdpbiBhbHNvIG5lZWRzIHRvIGNyZWF0ZSB0aGUgZHJhdy10b29scyBob29rLCBpbiBjYXNlIGl0IGlzIGluaXRpYWxpc2VkIGJlZm9yZSBkcmF3LXRvb2xzCiAgICB3aW5kb3cucGx1Z2luQ3JlYXRlSG9vaygncGx1Z2luRHJhd1Rvb2xzJyk7CgogICAgd2luZG93LnBsdWdpbi5jcm9zc0xpbmtzLmNyZWF0ZUxheWVyKCk7CgogICAgLy8gZXZlbnRzCiAgICB3aW5kb3cuYWRkSG9vaygncGx1Z2luRHJhd1Rvb2xzJyxmdW5jdGlvbihlKSB7CiAgICAgICAgaWYgKGUuZXZlbnQgPT0gJ2xheWVyQ3JlYXRlZCcpIHsKICAgICAgICAgICAgLy8gd2UgY2FuIGp1c3QgdGVzdCB0aGUgbmV3IGxheWVyIGluIHRoaXMgY2FzZQogICAgICAgICAgICB3aW5kb3cucGx1Z2luLmNyb3NzTGlua3MudGVzdEFsbExpbmtzQWdhaW5zdExheWVyKGUubGF5ZXIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGFsbCBvdGhlciBldmVudCB0eXBlcyAtIGFzc3VtZSBhbnl0aGluZyBjb3VsZCBoYXZlIGJlZW4gbW9kaWZpZWQgYW5kIHJlLWNoZWNrIGFsbCBsaW5rcwogICAgICAgICAgICB3aW5kb3cucGx1Z2luLmNyb3NzTGlua3MuY2hlY2tBbGxMaW5rcygpOwogICAgICAgIH0KICAgIH0pOwoKICAgIHdpbmRvdy5hZGRIb29rKCdsaW5rQWRkZWQnLCB3aW5kb3cucGx1Z2luLmNyb3NzTGlua3Mub25MaW5rQWRkZWQpOwogICAgd2luZG93LmFkZEhvb2soJ21hcERhdGFSZWZyZXNoRW5kJywgd2luZG93LnBsdWdpbi5jcm9zc0xpbmtzLm9uTWFwRGF0YVJlZnJlc2hFbmQpOwoKICAgIAp9CgovLyBQTFVHSU4gRU5EIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCgpzZXR1cC5pbmZvID0gcGx1Z2luX2luZm87IC8vYWRkIHRoZSBzY3JpcHQgaW5mbyBkYXRhIHRvIHRoZSBmdW5jdGlvbiBhcyBhIHByb3BlcnR5CmlmKCF3aW5kb3cuYm9vdFBsdWdpbnMpIHdpbmRvdy5ib290UGx1Z2lucyA9IFtdOwp3aW5kb3cuYm9vdFBsdWdpbnMucHVzaChzZXR1cCk7Ci8vIGlmIElJVEMgaGFzIGFscmVhZHkgYm9vdGVkLCBpbW1lZGlhdGVseSBydW4gdGhlICdzZXR1cCcgZnVuY3Rpb24KaWYod2luZG93LmlpdGNMb2FkZWQgJiYgdHlwZW9mIHNldHVwID09PSAnZnVuY3Rpb24nKSBzZXR1cCgpOwp9IC8vIHdyYXBwZXIgZW5kCi8vIGluamVjdCBjb2RlIGludG8gc2l0ZSBjb250ZXh0CnZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKdmFyIGluZm8gPSB7fTsKaWYgKHR5cGVvZiBHTV9pbmZvICE9PSAndW5kZWZpbmVkJyAmJiBHTV9pbmZvICYmIEdNX2luZm8uc2NyaXB0KSBpbmZvLnNjcmlwdCA9IHsgdmVyc2lvbjogR01faW5mby5zY3JpcHQudmVyc2lvbiwgbmFtZTogR01faW5mby5zY3JpcHQubmFtZSwgZGVzY3JpcHRpb246IEdNX2luZm8uc2NyaXB0LmRlc2NyaXB0aW9uIH07CnNjcmlwdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnKCcrIHdyYXBwZXIgKycpKCcrSlNPTi5zdHJpbmdpZnkoaW5mbykrJyk7JykpOwooZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKCgo="},{"name":"IITC plugin: show list of portals","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1480919321359,"data":{}},"enabled":true,"position":8,"file_url":"https://static.iitc.me/build/release/plugins/portals-list.user.js","uuid":"f432cdc0-eb4d-45fd-87eb-a58bdea307c5","source":""},{"name":"IITC plugin: Show total counts of portals","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1480919327014,"data":{}},"enabled":true,"position":9,"file_url":"https://static.iitc.me/build/release/plugins/portal-counts.user.js","uuid":"cc7dc288-f5b3-4d56-9ea1-d9df64180a6e","source":""},{"name":"IITC plugin: Keys","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1480919349898,"data":{}},"enabled":true,"position":10,"file_url":"https://static.iitc.me/build/release/plugins/keys.user.js","uuid":"0a589b83-309a-4bc5-9496-82b8b51007d0","source":""},{"name":"IITC plugin: Show farms by level","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1480919467846,"data":{}},"enabled":true,"position":11,"file_url":"https://static.iitc.me/build/release/plugins/layer-farms-find.user.js","uuid":"6b157a1d-b0f2-43bb-85ee-700542d86024","source":""},{"name":"IITC plugin: Sync","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1480919504230,"data":{}},"enabled":true,"position":12,"file_url":"https://static.iitc.me/build/release/plugins/sync.user.js","uuid":"57b17d24-f7c5-49fc-b689-3e292c36f9b1","source":""},{"name":"IITC plugin: Fly Links","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1480919552486,"data":{}},"enabled":true,"position":13,"file_url":"https://static.iitc.me/build/release/plugins/fly-links.user.js","uuid":"7d759dba-25c6-478e-88ab-dbf5075b0bdc","source":""},{"name":"IITC plugin: Show the direction of links on the map","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.ingress.com/intel*","http://*.ingress.com/intel*","https://*.ingress.com/mission/*","http://*.ingress.com/mission/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1480919574045,"data":{}},"enabled":true,"position":14,"file_url":"https://static.iitc.me/build/release/plugins/link-show-direction.user.js","uuid":"1b68c6a8-2bc8-4664-9934-9f672d710484","source":""}]}